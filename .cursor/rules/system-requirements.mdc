---
alwaysApply: true
---
<system-requirements>

# POS System MDC (Minimum Decision Constraints)

> **Purpose:** Guide AI/code assistants to implement a reliable POS. When in doubt, **ask before assuming**. Do not add entities/fields not listed here without approval.

## 1) Scope & Non-Functional Requirements
- **MVP Scope:** Products, Product Categories, Variants, Inventory, Sales, Payments, Receipts/Printing, Cashier Shifts, Daily Reports.
- **Excluded (MVP):** Loyalty, marketplace sync, multi-currency, advanced promotions engine.
- **Performance Targets:** Read TTFB ≤ 300 ms; sale commit ≤ 800 ms at 200 rps burst; p95 ≤ 1.2 s.
- **Consistency:** All sale flows are **ACID**; inventory updates use **row-level locks**.
- **Reliability:** Idempotent state-changing APIs; safe retries; audit trail on all writes.
 - **Multi-tenancy:** Row-scoped tenancy with strict data isolation. All reads/writes, caches, queues, webhooks, and logs must be tenant-aware. Superadmin may manage multiple tenants but must explicitly assume a tenant context for data operations.
 - **Vertical modes:** Configurable per tenant and per outlet. Support `restaurant` and `minimarket` modes in addition to default `pos`, toggling UI and workflow features without schema changes.

## 2) Global Settings & Conventions
- **Timezone:** `Asia/Jakarta`
- **Currency:** `IDR` (store as `decimal(18,2)`; usually display without decimals).
- **Tax Model:** Prices are **tax-inclusive** by default (`price_includes_tax=true`).
- **Rounding:**  
  - Non-cash: **bankers rounding** to 0.01.  
  - Cash: round to nearest **Rp100** (configurable `cash_rounding=100`).
- **Negative Stock:** Forbidden by default (`allow_negative_stock=false`).
- **Identifiers:**  
  - Receipt No: `OUTLET/REG-YYYYMMDD-####` (daily reset per register, zero-pad 4).  
  - External references must be opaque IDs (UUID/KSUID).
- **Audit:** No hard deletes for business entities; capture `old→new`, actor, reason, timestamp.

## 3) Domain Model (Minimum, Required Fields Only)
> Do **not** add columns/tables without approval.

- **product_categories**:  
  - `id (uuid)`  
  - `parent_id (nullable, fk → product_categories.id)`  
  - `name`  
  - `code (unique, optional)`  
  - `status (active|archived)`  

- **products**:  
  - `id (uuid)`  
  - `sku (unique)`  
  - `name`  
  - `category_id (nullable, fk → product_categories.id)`  
  - `tax_rate (decimal 5,2)`  
  - `price_incl (decimal 18,2)`  
  - `status (active|archived)`  

- **product_variants**:  
  - `id`  
  - `product_id`  
  - `code (unique)`  
  - `name`  
  - `barcode (unique, nullable)`  
  - `price_override_incl (nullable)`  

- **inventory**:  
  - `id`  
  - `variant_id`  
  - `outlet_id`  
  - `on_hand (int)`  
  - `safety_stock (int)`  

- **outlets**:  
  - `id`  
  - `code (unique)`  
  - `name`  
  - `address (nullable)`  

- **registers**:  
  - `id`  
  - `outlet_id`  
  - `name`  
  - `printer_profile_id (nullable)`  

- **shifts**:  
  - `id`  
  - `register_id`  
  - `opened_by`  
  - `opened_at`  
  - `opening_float (money)`  
  - `closed_by (nullable)`  
  - `closed_at (nullable)`  
  - `expected_cash (money)`  
  - `actual_cash (money)`  
  - `status (open|closed)`  

- **sales**:  
  - `id`  
  - `outlet_id`  
  - `register_id`  
  - `shift_id`  
  - `receipt_no`  
  - `customer_id (nullable)`  
  - `subtotal_excl`  
  - `tax_amount`  
  - `discount_amount`  
  - `total_due`  
  - `paid_total`  
  - `change_due`  
  - `status (completed|refunded|void)`  
  - `channel (pos|web)`  

- **sale_items**:  
  - `id`  
  - `sale_id`  
  - `variant_id`  
  - `qty`  
  - `unit_price_incl`  
  - `discount`  
  - `tax_rate`  
  - `line_excl`  
  - `line_tax`  
  - `line_incl`  

- **payments**:  
  - `id`  
  - `sale_id`  
  - `method (cash|card|ewallet|transfer)`  
  - `amount`  
  - `reference (nullable)`  

- **stock_moves**:  
  - `id`  
  - `variant_id`  
  - `outlet_id`  
  - `qty`  
  - `reason (sale|return|adjustment|receive)`  
  - `ref_type`  
  - `ref_id`  
  - `moved_at`  

- **returns**:  
  - `id`  
  - `sale_id`  
  - `policy (full|partial)`  
  - `reason`  
  - `total_refund`  
  - `method`  

- **users/roles/permissions**: standard RBAC  

## 4) RBAC (Minimum)
- **Cashier:** create sale, read product/inventory, open/close shift, create return ≤ Rp1.000.000.  
- **Supervisor:** all Cashier + approve discounts, stock adjustments ≤ ±5.  
- **Admin:** full access.  
- All write ops require authentication and are audited. Web UIs enforce CSRF.  
 - Roles and permissions are tenant-scoped. A system-level `SuperAdmin` can operate across tenants but must select a tenant context before performing tenant-bound actions.

## 5) Critical Business Rules (Must Enforce)
1. **Shift must be open** before `sales.create`; else `403 SHIFT_NOT_OPEN`.  
2. **Inventory decrement** happens **per item** on sale commit within a DB transaction; lock `inventory` rows (`SELECT … FOR UPDATE`).  
3. **Discounts** computed **per line** first; order-level discounts applied after.  
4. **Tax (tax-inclusive):**  
- line_incl = round(qty * unit_price_incl)
- line_excl = round(line_incl / (1 + tax_rate))
- line_tax = line_incl - line_excl
5. **Split payments** allowed; `sum(payments.amount) ≥ total_due`. **Change** only for **cash**.  
6. **Refunds** create compensating `stock_moves` for returned items only.  
7. **Void** never reuses receipt numbers; reverses stock effects, keeps audit.  
8. **Barcode lookup priority:** `product_variants.barcode` → `products.sku` → `product_variants.code`.  
9. **Imports** must be idempotent by `sku`/`barcode`; duplicates rejected with precise errors.  

## 6) Events & Integrations
- Emit domain events: `sale.created`, `sale.voided`, `sale.refunded`, `stock.changed`, `shift.opened`, `shift.closed`.  
- Payload = entity snapshot with IDs and totals.  
- Webhooks are **retryable** (exponential backoff) and **idempotent** (idempotency key).  

## 7) Printing & Receipts
- **Template:** HTML/Markdown → ESC/POS/PDF via adapters.  
- **Required fields:** outlet, register, receipt_no, cashier, datetime, items (qty×name), subtotal, discounts, tax, total, payments, change, footer (return policy).  
- **Paper:** 58 mm & 80 mm; long text **must wrap**; no truncation of item names.  

## 8) Offline Mode (If Enabled)
- Queue transactions locally (e.g., IndexedDB or local store) and sync later.  
- Temporary receipt: `TEMP-<device>-<timestamp>` → remapped upon sync.  
- Conflicts resolved server-side; devices accept corrections.  

## 9) Security & Privacy
- **Never** commit secrets; load from environment.  
- Do not log PII or card PAN; store only gateway tokens/refs.  
- Apply **rate limits** to write endpoints; enforce `Idempotency-Key`.  
- Destructive schema changes require explicit human approval.  
 - Enforce strict tenant isolation at application and database layers; every query must include tenant scope. Background jobs, cache keys, storage paths, and websocket channels must be namespaced by tenant.  
 - Namespacing: receipt numbering and `Idempotency-Key` must be unique per tenant (and per register where applicable).

## 10) Testing Matrix (Must Pass)
- Sales: single/multi-item, line & order discounts, split payments, cash rounding.  
- Shifts: open → sale → close; cash mismatch handling.  
- Stock: forbid < 0 when `allow_negative_stock=false`; refunds return stock.  
- Concurrency: two cashiers selling the same variant do not oversell (verified with locks).  
- Printing: 20+ items on 58 mm/80 mm render correctly (wrap/align).  
- Daily Report = sum(`sale_items`) + sum(`payments`) with tax math consistent.  
 - Tenancy: no cross-tenant access; per-tenant uniqueness constraints; tenant-scoped caches/events; superadmin context switching verified.  
 - Restaurant mode: open tabs per table, split/merge bills, partial payments per guest, service charge/tip math, KDS/kitchen ticket routing.  
 - Minimarket mode: barcode scanning performance, weighted/price-embedded barcode parsing, supervisor-gated price overrides, receipt-based returns workflow.

## 11) Edge Cases
- Variant `price_override_incl` vs product `price_incl`.  
- Discount greater than price → floor to 0 line total.  
- Partial returns for sales with split payments.  
- 0% tax items mixed with taxed items.  
- Duplicate SKUs/barcodes on import.  
- Stale open shift (not closed overnight).  
- Duplicate offline uploads (dedupe by idempotency key).  
 - Restaurant: split/merge bills; per-guest partial payments; course firing vs print timing; voids after kitchen fire.  
 - Minimarket: weighted barcode prefixes colliding with real SKUs; open-price items; override limits and approvals.  
 - Rounding interactions with service charges and tips; ensure totals remain consistent.  
 - Tenancy: same SKU/barcode allowed across tenants; uniqueness enforced within tenant only; ensure exports/imports remain tenant-scoped.

## 12) Acceptance Criteria (Gherkin Samples)
```gherkin
Feature: Cash payment rounding
Scenario: Rounding to nearest Rp100 for cash
 Given a product "Teh Botol" priced at 3,250 with tax_rate 11%
 When quantity is 1 and payment method is "cash"
 Then total_due equals Rp3,300
 And change_due is correct for the cash received

Feature: Prevent negative stock
  Scenario: Block sale when stock insufficient
    Given variant "vr-1" has on_hand 0
    When a sale attempts qty 1
    Then the request is rejected with code "INSUFFICIENT_STOCK" ```

```gherkin
Feature: Multi-tenant data isolation
  Scenario: Same SKU across two tenants does not collide
    Given tenant "toko-a" has product with sku "ABC-123"
    And tenant "toko-b" has product with sku "ABC-123"
    When a user from tenant "toko-a" searches for "ABC-123"
    Then only the product from tenant "toko-a" is visible

Feature: Restaurant split bill with partial payments
  Scenario: Split one table bill into two and pay separately
    Given a table has items A, B, C, D in one open tab
    When the cashier splits items A,B to Bill 1 and C,D to Bill 2
    And Bill 1 is paid by card and Bill 2 is paid by cash
    Then inventory decrements per item on each commit within a transaction
    And receipts print correctly per bill with service charge and tips applied

Feature: Minimarket weighted barcode parsing
  Scenario: Parse price-embedded EAN and compute totals
    Given an item uses weighted barcode format with price embedded
    When the barcode is scanned
    Then the unit price and quantity are derived from the barcode
    And the line total equals the parsed price with tax math consistent

Feature: Supervisor-gated price override
  Scenario: Cashier requests price override over threshold
    Given a cashier scans an item and enters an override exceeding policy
    When a supervisor approves the override
    Then the sale proceeds and the audit trail captures actor, reason, and timestamp
```

## 14) Multi-Tenancy (Row-Scoped)
- **Model:** Default to row-scoped multi-tenancy with strict isolation. All tenant-bound entities MUST be queried and written within an active tenant context.  
- **Context:** Tenant derived from domain/subdomain, user membership, or explicit header. Middleware must enforce tenant presence and prevent cross-tenant leakage.  
- **Indexes & Uniqueness:** Business-meaningful uniqueness (e.g., `sku`, `barcode`, `receipt_no`) is enforced per tenant (and per register for receipts).  
- **Namespacing:** Caches, queues, websocket channels, storage paths, and idempotency keys are namespaced by tenant.  
- **RBAC:** Roles/permissions are tenant-scoped. A `SuperAdmin` may access multiple tenants but must assume a tenant before data actions.  
- **Auditing:** Audit entries include tenant, actor, old→new, reason, timestamp. Events and webhooks include tenant in payloads for idempotency and routing.  
- **Schema Note:** Implementations commonly add a `tenant` identifier to business entities and composite unique indexes. Any schema changes require explicit approval per this MDC.

## 15) Vertical Modes
- **Configuration:** `mode` is configurable per tenant and optionally per outlet. Supported: `restaurant`, `minimarket`, default `pos`. Feature flags drive UI/flow; schema remains unchanged unless approved.  

- **Restaurant Mode Requirements:**  
  - Table service: open/transfer/merge/split tabs; seat-level optional.  
  - Coursing and fire/hold; kitchen tickets routed by category/station; KDS optional.  
  - Modifiers/add-ons with price deltas; comp/void with reason and RBAC.  
  - Service charge (percent or fixed) and tips; included in totals with correct rounding.  
  - Partial payments per guest; print separate receipts; inventory decremented on commit.  

- **Minimarket Mode Requirements:**  
  - High-throughput scanning; quick tender keys.  
  - Weighted/price-embedded barcode parsing (e.g., EAN patterns); open-price items with supervisor approval.  
  - Supervisor-gated price overrides over thresholds; receipt-based returns.  
  - Label/receipt printing suitable for 58mm/80mm; cash drawer operations (pay in/out).  
  - Basic per-line discounts only; advanced promotions remain out-of-scope for MVP.

## 13) Cursor Guardrails (Pin These)
- Follow this MDC strictly; do not expand schema without approval.
- Wrap sale + stock operations in a single DB transaction with row locks.
- Enforce business rules above; write tests for every rule touched.
- Require Idempotency-Key for all state-changing HTTP calls.
- Use decimal for money; internal math may use integer cents for precision.
- Ask clarifying questions if any ambiguity remains.

</system-requirements> ```
